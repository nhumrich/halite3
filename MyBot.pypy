#!/usr/bin/env python3
import math

import random
import logging
from copy import copy
import itertools
import sys
# import numpy as np

from hlt import constants
from hlt.positionals import Direction, Position
from hlt import globals, Game


# sys.path.append('/opt/pycharm-professional/debug-eggs/pycharm-debug.egg')
# import pydevd
# pydevd.settrace('localhost', port=8989, stdoutToServer=True, stderrToServer=True)

game = Game()
globals.game = game
size = game.game_map.width
player_num = len(game.players)

constants.parse_constants(player_num, size)


# if not NEW_SPAWN:
#     import pydevd
#     pydevd.settrace('localhost', port=8989, stdoutToServer=True, stderrToServer=True)

# logging.info(f'spawn type: {NEW_SPAWN}')https://www.brow.sh/

astar_cache = {}

spent_so_far = 0
# np.set_printoptions(threshold=np.nan)

first_seen = {}


def myhash(self):
    return hash((self.x, self.y))


Position.__hash__ = myhash


class PP:
    def __init__(self, priority, position):
        self.priority = priority
        self.position = position

    def __lt__(self, other):
        return self.priority < other.priority

    def __repr__(self):
        return f"PP:{self.priority}-{self.position}"


def find_best_path_to_target():
    def _helper(target):
        pass


def move(target, source, ship, positions_used, command_queue, collide=False, shortest=False):
    # logging.info(f'moving to {target} from {source}')

    def doit(pos):
        po = game.game_map.normalize(ship.position.directional_offset(pos))
        # logging.info(f'testing {d}')
        if (collide and po in dropoffs) or po not in positions_used:
            # logging.info(f'ship {ship.id} on {source} next move on {po}')
            positions_used.add(po)
            command_queue.append(ship.move(pos))
            # logging.info(command_queue)
            return True
        return False

    all_possible = {(0, 0), (-1, 0), (1, 0), (0, -1), (0, 1)}
    moves = game.game_map.get_unsafe_moves(source, target)
    if target == source:
        # stay where we are
        if doit((0, 0)):
            return

    # find cheapest path
    # if shortest:
    #     moves = sorted(moves, key=lambda x: astar(source.directional_offset(x), target),
    #                reverse=not shortest)

    if len(moves) >= 2:
        # sort by cost
        moves = sorted(moves,
                       key=lambda x: game.game_map[
                           ship.position.directional_offset(x)].halite_amount,
                       reverse=not shortest)

    for d in moves:
        if doit(d):
            return
        all_possible.remove(d)

    # if (0, 0) in all_possible:
    #     # try staying put first
    #     if doit((0, 0)):
    #         return
    #
    #     all_possible.remove((0, 0))

    while all_possible:
        d = random.sample(all_possible, 1)[0]
        # d = all_possible.pop()
        if doit(d):
            return
        all_possible.remove(d)

    # welp, we crash
    # logging.info(f'{ship.id} crash')


def closest_dropoff(position):
    min_so_far = 5000
    closest_so_far = None
    for do in dropoffs:
        distance = game.game_map.calculate_distance(position, do)
        if distance < min_so_far:
            min_so_far = distance
            closest_so_far = do
    return closest_so_far


def get_halite_amount():
    hal = 0
    for x, y in itertools.product(range(game.game_map.width), range(game.game_map.height)):
        hal += game.game_map[Position(x, y)].halite_amount
    return hal



num_players = len(game.players)
logging.info(f'{num_players} player mode.')

syp = game.players[game.my_id].shipyard.position

dropoffs = [syp]
collection_per_turn = []

logging.info(syp)
returning = set()

starting_halite_amount = get_halite_amount()

# distance_array = np.array([[abs(i) + abs(j) + 1 for i in range(-20, 21)] for j in range(-20, 21)])
# distance_2 = np.square(distance_array)

game.ready(constants.NAME)
logging.info("Successfully created bot! My Player ID is {}.".format(game.my_id))


def run():
    global spent_so_far

    for cur_turn in range(1000):
        ships_des = {}
        destinations = {}
        game.update_frame()
        # You extract player metadata and the updated map metadata here for convenience.
        me = game.me
        game_map = game.game_map

        turns_left = constants.MAX_TURNS - game.turn_number
        halite_left = get_halite_amount()
        halite_percent = halite_left / starting_halite_amount
        # astar_cache.clear()
        highs = []
        # spots = PriorityQueue()
        for x, y in itertools.product(range(game_map.width), range(game_map.height)):
            highs.append(Position(x, y))
        """
                for x, y in itertools.product(range(game_map.width), range(game_map.height)):
            total_so_far = 0
            current_p = Position(x, y)
            for x1, y2 in itertools.product(range(-4, 5), range(-4, 5)):
                offset = (x1, y2)
                new_pos = game_map.normalize(current_p.directional_offset(offset))
                # logging.info(f'current: {current_p} offset:{offset} new_pos:{new_pos}')
                spot_amount = game_map[new_pos].halite_amount
                # if cur_turn == 0:
                #     logging.info(f'{new_pos} = {spot_amount}')
                if x1 == 0 and y2 == 0:
                    total_so_far += spot_amount
                else:
                    total_so_far += 255 * math.sqrt(spot_amount / 2048)
                    # total_so_far += spot_amount
            highs.append(PP(total_so_far, Position(x,y)))"""

        enemy_locations = {ship.position for i in game.players for ship in game.players[i].get_ships() if game.players[i].id != game.my_id}
        # for loc in enemy_locations:
        #     if loc in destinations:
        #         sp = destinations.pop(loc, None)
        #         ships_des.pop(sp, None)

        """
        logging.info(sorted(highs, reverse=True)[:10])
        highs = [pp.position for pp in sorted(highs, reverse=True)[:constants.LOOK_AMOUNT]]
        logging.info(highs[:10])"""
        highs = sorted(highs, key=lambda p: game_map[p].halite_amount, reverse=True)[:constants.LOOK_AMOUNT]
        do_spots = highs[:constants.SO_LOOK_AMOUNT]
        positions_used = set()
        command_queue = []

        ship_queue = me.get_ships()
        for do in me.get_dropoffs():
            pos = do.position
            if pos not in dropoffs:
                dropoffs.append(pos)

        globals.dropoffs = dropoffs

        # top10 = [highs.get().position for _ in range(10)]
        # logging.info(top10)

        # sort ships by proximity to shipyard
        # ship_queue = sorted(ship_queue, key=lambda s: game_map.calculate_distance(s.position, syp),
        #                     reverse=True)
        # sort ships by id
        ship_queue = sorted(ship_queue, key=lambda s: s.id)

        dropoff = False
        for ship in ship_queue:

            # is ship in inspired state?
            num_of_enemies = 0
            for x, y in itertools.product(range(-4, 5), range(-4, 5)):
                pos = ship.position.directional_offset((x,y))
                if pos in enemy_locations:
                    num_of_enemies += 1
                if num_of_enemies >= 2:
                    ship.inspired = True
                    break

            ship.collect_amount = game_map[ship.position].halite_amount * .25
            if ship.inspired:
                ship.collect_amount += ship.collect_amount * 2  # inspiration bonus

            if ship.id not in first_seen:
                first_seen[ship.id] = game.turn_number

            # if ship.position in destinations:
            #     s = destinations[ship.position]
            #     del ships_des[s]
            #     del destinations[ship.position]
            if globals.endgame and ship.position in dropoffs:
                # ignore ship completely so that it can die
                ship.staying = True

            # should we build a drop-off?
            elif (len(ship_queue) >= constants.SHIP_DO_RATIO * len(dropoffs) and
                  ship.position in do_spots and
                  game_map.calculate_distance(ship.position, closest_dropoff(ship.position)) >
                  constants.DO_DISTANCE and
                  me.halite_amount > constants.DROPOFF_COST -
                  game_map[ship.position].halite_amount + ship.halite_amount and
                  game.turn_number < constants.MAX_TURNS * constants.DO_TURN_FACTOR and
                  halite_percent > constants.DO_HALITE_FACTOR and
                  # len(dropoffs) < 4 and
                  not dropoff):
                dropoff = True
                spent_so_far += constants.DROPOFF_COST - game_map[ship.position].halite_amount
                command_queue.append(ship.make_dropoff())
                ship.staying = True
                positions_used.add(ship.position)
                d = ships_des.pop(ship.id, None)
                destinations.pop(d, None)

            elif ship.must_stay:
                positions_used.add(ship.position)
                command_queue.append(ship.stay_still())

            elif ship.should_return:
                returning.add(ship.id)
                ship.returning = True

            # elif (ship.halite_amount + ship.collect_amount > 1000):
                # its not worth staying on the square, just go home
                # ship.returning = True
                # returning.add(ship.id)

        # mark enemy ships if we don't control more than half the ships on the board

        if len(ship_queue) < len(enemy_locations):
            for pos in enemy_locations:
                for d in Direction.get_all_cardinals() + [(0,0)]:
                    location = game_map.normalize(pos.directional_offset(d))
                    if game_map.calculate_distance(location,
                                                   closest_dropoff(pos)) > 1:
                        positions_used.add(location)

        # logging.info(enemy_locations)

        for ship in ship_queue:
            if ship.position in dropoffs:
                returning.discard(ship.id)
                ship.returning = False
            elif ship.id in returning and not ship.staying:
                # move to drop-off
                # logging.info('move to dropoff')
                ship.returning = True

                d = ships_des.pop(ship.id, None)
                destinations.pop(d, None)

                ship.dest = closest_dropoff(ship.position)

        remaining_ships = [ship for ship in ship_queue if not ship.returning and not ship.staying]
        while len(remaining_ships) > 0:
            ship = remaining_ships.pop(0)
            # if (ship.halite_amount + ship.collect_amount >
            #       constants.RETURN_AMOUNT):
            if False:
                # will staying make me cross over the line?
                # ship.staying = True
                globals.move(ship.position, ship.position, ship, positions_used, command_queue)

            # elif ship in ships_des:
            #     # target_location = ships_des[ship]
            #     # if ship.collect_amount * constants.STAY_FACTOR > game_map[p].halite_amount / (
            #     #         game_map.calculate_distance(ship.position, p) * constants.DISTANCE_FACTOR + 1):
            #     #     ship.dest = ship.position
            #     # else:
            #     ship.dest = ships_des[ship]
            #     continue
            else:
                if ship.id == 3 and 17 < cur_turn < 22:
                    pass

                # logging.info(f'd {destinations}')
                ranks = {}
                highest_so_far = ship.collect_amount * constants.STAY_FACTOR
                best = ship.position
                ranks[best] = highest_so_far
                if ship.id in ships_des:
                    p = ships_des[ship.id]  # where I was going
                    w = game_map[p].halite_amount / (
                            game_map.calculate_distance(ship.position, p) * constants.DISTANCE_FACTOR + 1)
                    if p in enemy_locations:
                        w *= constants.ENEMY_FACTOR
                    if w > highest_so_far:
                        best = p
                    ranks[p] = w
                else:
                    for p in highs:
                        # p = game_map.normalize(p)
                        if p in destinations:
                            old_ship = destinations[p]
                            old_distance = game_map.calculate_distance(old_ship.position, p)
                            new_distance = game_map.calculate_distance(ship.position, p)
                            if new_distance >= old_distance:
                                # target is now mine, closest person gets it
                                continue
                        hal = game_map[p].halite_amount

                        if p in dropoffs:
                            hal = ship.halite_amount

                        weighted = hal / (game_map.calculate_distance(ship.position, p)
                                          * constants.DISTANCE_FACTOR + 1)
                        if weighted > highest_so_far:
                            best = p
                            highest_so_far = weighted
                        ranks[p] = weighted

                p = best
                if 10 < cur_turn < 30:
                    logging.info(f'Ship {ship.id} moving to position {p} with ranks: {ranks}')

                if p in destinations:
                    # we bumped someone
                    destinations[p], old = ship, destinations[p]
                    remaining_ships.append(old)
                else:
                    destinations[p] = ship

                w = game_map[p].halite_amount / (
                        game_map.calculate_distance(ship.position,
                                                    p) * constants.DISTANCE_FACTOR + 1)
                logging.info(f'ship {ship.id} wanting to go to {p} with w:{w}')

                if p == ship.position:
                    globals.move(p, ship.position, ship, positions_used, command_queue)
                    ship.dest = None
                else:
                    ship.dest = p

        for ship in ship_queue:
            if ship.dest:
                # destinations[ship.dest] = ship
                # ships_des[ship] = ship.dest
                if ship.dest in dropoffs:
                    shortest = True
                else:
                    shortest = False
                globals.move(ship.dest, ship.position, ship, positions_used, command_queue,
                             shortest=shortest)

        halite_collected = me.halite_amount + spent_so_far - 5000
        ship_turns = 0
        for id, turn in first_seen.items():
            ship_turns += game.turn_number - turn

        collection_per_turn.append(halite_collected)

        if game.turn_number < 20:
            avg_per_ship_per_turn = 2000
        else:
            # halite_diff = collection_per_turn[game.turn_number - 1] - \
            #               collection_per_turn[game.turn_number - 21]
            avg_per_ship_per_turn = halite_collected / ship_turns

        logging.info(f'turn {game.turn_number} has avg {avg_per_ship_per_turn}')

        # if (avg_per_ship_per_turn * turns_left >= 1400 and
        if ((avg_per_ship_per_turn * turns_left >= constants.BUILD_FACTOR) and
                me.halite_amount >= constants.SHIP_COST and
                not dropoff and
                halite_percent > constants.BUILD_HALITE_LIMIT and
                syp not in positions_used):
            spent_so_far += constants.SHIP_COST
            positions_used.add(syp)
            command_queue.append(me.shipyard.spawn())
            # Send your moves back to the game environment, ending this turn.
        # logging.info(command_queue)
        game.end_turn(command_queue)


if __name__ == '__main__':
    run()
